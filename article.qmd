---
title: "Poincaré and SimBio: a versatile and extensible Python ecosystem for modeling systems."
bibliography: bibliography.bib
format:
  html:
    number-sections: true
    anchor-sections: true
    css: article.css
---

```{python}
# | echo: false
import matplotlib

matplotlib.rc("figure", figsize=(4, 2))
```

# Introduction

Chemical Reaction Networks (CRNs)
are a fundamental concept of modelling in numerous fields including systems biology, biochemistry, chemical engineering and epidemiology.
They are comprised of a set of chemical species or biological entities and representation of complex interaction and transformation between them through a series reactions.
These systems can be modelled and simulated through multiple approaches:
deterministic Ordinary Differential Equations (ODEs) to model macroscopic behavior,
Stochastic Differential Equations (SDEs) to model microscopic fluctuations,
and jump processes (Gillespie-like simulations) to account for the discreteness of populations.
Instead of directly writing the equations for each of these formulations
which is error-prone and difficult to reuse,
these models can be written in a higher-level description
that can be compiled for these different types of simulations.

Several tools already exist for defining and simulating CRNs.
BioSimulators.org [@shaikhBioSimulatorsCentralRegistry2022],
a registry of simulation tools,
list at least 15 Python software including COPASI [@hoopsCOPASICOmplexPAthway2006], Tellurium [@choiTelluriumExtensiblePythonbased2018] and PySB [@lopezProgrammingBiologicalModels2013]. 
COPASI is a standalone software with a GUI for defining and simulating models.
It's widely used for its user-friendly interface and comprehensive features.
There are also python bindings and interfaces for COPASI to allow advanced scripting.
Tellurium is a Python-based modeling environment,
however, it uses a C++ library called libRoadRunner in the backend to simulate models.
PySB is a Python library
that created a DSL using standard Python to define models
which are then compiled to ODE using a Perl library called BioNetGen [@harrisBioNetGenAdvancesRulebased2016].

One limitation of these tools is that they are not extensible from Python,
as they are not fully Python packages
but wrap libraries in other languages to do the simulation.
While they enable model definition and simulation control via Python scripts,
they don't fully leverage Python's extensive package ecosystem.
For example, in COPASI, users are restricted to predefined distributions for Random Parameter Scans
and cannot utilize the diverse distributions available in `scipy.stats`
Similarly, Tellurium doesn’t allow the use of Python solvers,
as adding new integrators requires C++ implementation.

Another challenge is the way models are written.
Many tools use a Domain Specific Language (DSL) for coding,
and support the System Biology Markup Language (SBML) as an exchange format [@huckaSBMLL3V2],
as direct SBML coding is impractical.
A DSL allows reuse of code in different programming environments,
but it will not be recognized by default in Integrated Development Environments (IDEs).
Therefore DSLs cannot provide the development experience such as syntax highlighting, code completion, refactoring, and static analysis,
unless such support is specifically developed.
Tellurium uses a Domain Specific Language (DSL) called Antimony [@smithAntimonyModularModel2009],
which can be translated to SBML.
An extension for Visual Studio Code was developed, but its maintenance could be demanding task for the systems biology community.
PySB, using Python’s dynamic nature, created a DSL within Python.
By default, it uses global state to create species and parameters,
without assigning them to Python variables
or adding them explicitly to the model,
but this approach is not fully compatible with IDEs,
affecting the development experience.

To overcome these limitations,
we developed poincaré and SimBio,
open-source Python packages for defining and simulating systems.
Poincaré allows defining differential equation systems,
while SimBio builds on it for defining reaction networks.
They are focused on providing an ergonomic experience to end-users by integrating well with IDEs and static analysis tools
through the use of standard modern Python syntax.
Since they are coded in Python,
every part from model definition to simulation can be extended from Python syntax.
Being the first-ever pure Python packages for systems modelling,
they offer extensive extensibility,
from simple tasks like reusing integrators defined in other packages,
to complex ones like altering the compilation process to leverage some structure in the equations.
For example,
using a for-loop in the compiled equations could improve the runtime performance
if there is some repetitive structure in the system,
as happens in spatial modelling.
The models built using these packages can be introspected to create other representations,
such as graphs connecting species and/or reactions,
or tables with parameters or equations.
Furthermore,
they have a modular architecture with a clear separation of concerns,
making it easier to maintain or to contribute new code,
which is beneficial for developers and maintainers.
We showcased the reliability of these tools by benchmarking them against the simulation results from other tools.
We also highlighted the substantial performance improvements our tools offer,
as this is crucial for construction and simulation of models of whole cells and organisms,
which necessitate the simulation of significantly large-scale models.


# Results

Modular code architecture makes code reusable, extensible, and easier to maintain.
Therefore, we split the code to define and simulate reaction systems into three Python packages:
symbolite, to create symbolic expressions;
poincaré, to define dynamical systems;
and simbio, to define reaction systems and interface with systems biology standards such as SBML.
These are pure Python packages with standard dependencies from the PyData scientific stack such as NumPy [@harrisArrayProgrammingNumPy2020] and pandas [@mckinneyDataStructuresStatistical2010].
They are published in PyPI (the Python Package Index),
where links to the source code and documentation hosted in GitHub can be found,
and can be easily installed with `pip install <package_name>`.

Symbolite is a lightweight symbolics package to create algebraic mathematical expressions.
Symbolite expressions can be inspected and compiled to various backends.
Currently, we have implementations for
NumPy [@harrisArrayProgrammingNumPy2020];
Numba [@lamNumbaLLVMbasedPython2015], a Just-in-Time (JIT) compiler to LLVM;
SymPy [@meurerSymPySymbolicComputing2017], a library for symbolic mathematics;
and JAX [@jax2018github], a library that support automatic differentiation
and compilation to GPUs and TPUs.
Symbolite is designed to facilitate the easy integration of new backends.

## Versatile modelling and simulation of dynamical systems with Poincaré

:::: {#fig-poincare layout-nrow=4}

```{python}
from poincare import Derivative, System, Variable, initial


```

::: {#fig-first-order layout-ncol=3 layout-valign="center"}
```{python}
class Decay(System):
    x: Variable = initial(default=1)
    eq = x.derive() << -x


```

$$
\frac{dx}{dt} = -x
$$

$$
x(0) = 1
$$

First-order system of an exponential decay.
The variable `x` stores the initial condition for $x$,
and the variable `eq` stores the rate equation for $x$.
:::

::: {#fig-second-order layout-ncol=3 layout-valign="center"}
```{python}
class Oscillator(System):
    x: Variable = initial(default=1)
    v: Derivative = x.derive(initial=0)
    eq = v.derive() << -x


```

$$
\frac{d^2x}{dt^2} = -x
$$

$$
\begin{cases}
    x(0) &= 1 \\
    \frac{dx}{dt}(0) &= 0
\end{cases}
$$


Second-order system of an harmonic oscillator,
where the variable `v` stores the derivative $\frac{dx}{dt}$
and the rate equation is specified for the derivative `v`.
:::

::: {#fig-composition layout-ncol=3 layout-valign="center"}
```{python}
class BigModel(System):
    x: Variable = initial(default=1)
    linked = Decay(x=x)
    independent = Decay(x=2)


```

$$
\begin{cases}
    \frac{dx}{dt} = -x \\
    \frac{dy}{dt} = -y
\end{cases}
$$

$$
\begin{cases}
    x(0) &= 1 \\
    y(0) &= 2
\end{cases}
$$

First-order system of two exponential decays by composition of the `Decay` system.
The subsystem `linked` has a reference to the outer variable `x`,
while the subsystem `independent` defines a new variable with initial condition §2$,
which on the corresponding mathematical expression was named $y$.
:::

Code and corresponding mathematical expressions for different systems.
::::

Poincare is a package to define and simulate dynamical systems.
It provides a `System` class,
where one can define `Constant`s, `Parameter`s, `Variable`s,
and create equations linking a variable's derivative with an expression (@fig-first-order).
It also allows to define higher-order systems
by assigning an initial condition to a `Derivative` (@fig-second-order).

Utilizing classes for system definition offers several advantages:

1. The variable name to which a component is assigned can be automatically saved in the component for introspection (i.e., `Oscilator.x.name == "x"`),
2. It provides a namespace such that allows to easily define of multiple independent models in the same script,
3. It allows IDEs to provide autocomplete and refactoring capabilities (`Oscillator.<TAB>` shows `x`, `v` and `eq`),
4. It allows creation of instances which can be composed into a bigger model (@fig-composition).

For this last point,
IDEs that support `dataclass_transform` [@debontePEP681Data2021] can provide a tooltip with the expected signature (@fig-composition).
This requires the use of type annotations
which play a more significant role in static type checking,
as they can help to identify errors before running the code.
For instance, to parametrize the initial conditions of variables we have to use a `Constant`.
If we try to use a `Parameter`, which could be a time-dependent expression, it is flagged as a type error (@fig-ide).

::: {#fig-ide layout-ncol=2 layout-valign="bottom"}
![](src/ide/ide1.svg)

![](src/ide/ide2.svg)

Screenshots of Visual Studio Code showing tooltips and highlighted type errors.
`Constant` are assigned with `assign(..., constant=True)` and can be used to link `Variable`s initial conditions,
while trying to use a `Parameter` instead is flagged as type errors (red underlining).
The IDE automatically recognizes `e` as an `Equation`,
and provides autocompletion of the variables.
A tooltip is shown when composing models,
which show the expected variables and their default values.
The IDE highlights
wrong names (`z` is not a name in `Model`)
and
mismatched types (`x` is `Variable` and `a` must be a number or a `Constant`)
:::

To simulate a system,
we created a `Simulator` instance (@fig-sim),
which compiles a given system and interfaces with solvers.
By default, it creates a first-order ordinary differential equation (ODE) system
using `numpy` as a backend.
This can be easily switched to other solvers. 
The Simulator wraps the output in a `pandas.DataFrame`,
which can be easily plotted with the standard `plot` method.

::: {#fig-sim layout=[[1],[1,1]]}
```{python}
import numpy as np
from poincare import Simulator

sim = Simulator(Oscillator)
df = sim.solve(save_at=np.linspace(0, 5, 101))
```

```{python}
df.head()
```

```{python}
df.plot();
```

Simulation of the `Oscillator` system from @fig-second-order.
The output is a `pandas.DataFrame` with a column for each variable
and the time as index.
It is inspected and plotted with the `pandas` methods.
:::

Switching backends to `"numba"` can improve model runtime
on a factor up to x30 or more for big or long running models,
however incurs in a compile time penalty for the first run
which must be taken into account.

## Extensible definition of reaction networks using SimBio

:::: {#fig-simbio layout-nrow=3}

```{python}
from simbio import Compartment, MassAction, Species, Reaction, initial


```

::: {layout-ncol=2 layout-valign="center"}
```{python}
class Model(Compartment):
    """2A -> B"""

    A: Species = initial(default=1)
    B: Species = initial(default=0)
    r = Reaction(
        reactants=[2 * A],
        products=[B],
        rate_law=1,
    )


```

$$
\begin{align}
&\begin{cases}
    \frac{dA}{dt} = -2 \\
    \frac{dB}{dt} = +1
\end{cases}
\\\\
&\begin{cases}
    A(0) &= 1 \\
    B(0) &= 0
\end{cases}
\end{align}
$$
:::

::: {layout-ncol=2 layout-valign="center"}
```{python}
class Model(Compartment):
    """2A -> B"""

    A: Species = initial(default=1)
    B: Species = initial(default=0)
    r = MassAction(
        reactants=[2 * A],
        products=[B],
        rate=1,
    )


```

$$
\begin{align}
&\begin{cases}
    \frac{dA}{dt} = -2 A^2 \\
    \frac{dB}{dt} = +1 A^2
\end{cases}
\\\\
&\begin{cases}
    A(0) &= 1 \\
    B(0) &= 0
\end{cases}
\end{align}
$$
:::

A reaction system for species $A$ and $B$ with initial conditions $1$ and $0$, respectively.
A single reaction transforming $2A$ into $B$ is saved in variable `r`.
The rate $1$ is specified directly for `Reaction`,
and is proportional to the reactants for `MassAction`.
::::

For the reaction networks,
our focus is on first-order differential equations
that describe the rate of change of species.
SimBio simplifies the definition of these network models by introducing `Species`,
which consists of a `poincare.Variable` and stoichiometry,
and `Reaction`,
a construct that converts reactants into products taking into account the stoichiometry (@fig-simbio).
Additionally, SimBio features `MassAction`, a subclass of `Reaction`,
which intuitively incorporates reactants into the rate law (@fig-simbio).

Several commonly used reactions are predefined as `MassAction` subclasses,
such as
`MichaelisMenten` ($S + E \leftrightarrow ES \rightarrow P + E$)
and its approximate form without the intermediate species $ES$,
and it is also simple to implement your own as subclasses of `Reaction` or `MassAction`.
Additionally, SimBio supports importing from and exporting to SBML,
and downloading them directly from BioModels [@malik-sheriffBioModels15Years2020] (@fig-simbio-io).

::: {#fig-simbio-io layout-ncol=1}
```{python}
from simbio.io import biomodels, sbml

model = sbml.load("repressilator.sbml")  # from existing SBML file
model = biomodels.load_model("BIOMD12")  # from BioModels
model
```

Creation of a model from a local SBML file or one uploaded to BioModels.
:::

## Reproducibility and performance

![Performance of different softwares to solve models from the curated section of BioModels. (left) Run time for the model BIOMD3 as a function of the number of output points. (right) Run time for different models for 300 output points, using the geometric mean of the different softwares to order them.](src/performance/figures/performance.png){#fig-runtime}

To evaluate SimBio's reproducibility,
we analyzed curated SBML models from BioModels [@malik-sheriffBioModels15Years2020].
Among the first 100 curated models from BioModels we selected 60 which did not contains events,
as SimBio doesn't support events yet.
We simulated the selected models with COPASI
and used the simulated results as ground truth,
and demonstrated that SimBio reproduces the results with minor numerical differences depending on the solver tolerance.

For performance testing,
we ran simulations using COPASI, Tellurium/RoadRunner, and SimBio.
Within SimBio, both NumPy and Numba backends were considered.
The LSODA solver was used for COPASI and SimBio,
while for Tellurium the comparable CVODE solver was used.
In all cases, we used relative and absolute tolerances of $10^{-6}$. We measured three simulation stages:
loading, the initial (cold) run, and subsequent (warm) runs for each model.

For COPASI and Tellurium/RoadRunner,
we noted that its runtime depended on the number of evaluation points,
something that does not seem to happen with SimBio (@fig-runtime, left).
While SimBio's NumPy backend is slower than both COPASI and RoadRunner,
we obtained an order of magnitude speed-up using the numba backend putting it on par with them.
A user might have to consider the trade-off between compilation and run times,
as the compilation of the right-hand-side (RHS) code might take longer than the runtime itself,
and not be worth it for running the model only once.
Another speed-up in the runtime can be had
by switching the LSODA `scipy` solver for a more efficient `numbalsoda` implementation,
which avoids the Python interpreter between each of the integration steps.
This last combination beats all other methods,
which is also true for the other models we tested (@fig-runtime, right).


# Discussion

In this article,
we introduced a suite of Python packages we developed
for defining and simulating dynamical systems and reaction networks.
These packages are deeply integrated with Integrated Development Environments (IDEs),
enabling code analysis tools to identify errors prior to execution and assist in refactoring and code completion.
We adopted standard modern Python syntax to ensure seamless IDE integration, supported by the extensive Python community.

Our approach differs from previous tools in that both the model definition and its compilation into an Ordinary Differential Equation (ODE) function are entirely Python-based.
This approach simplifies the development of various simulation methods,
including performance enhancements that exploit specific model structures. Importantly, being Python-based does not compromise performance compared to C/C++ tools, as the ODE functions can be Just-In-Time (JIT) compiled using Numba.

The inclusion of SBML support facilitates the effortless reuse of models created by the systems biology community,
along with the vast collection of public models hosted in the BioModels repository.
The modular architecture of these packages facilitates their reuse, enhancement, and extension by the wider Python community.
For instance, an individual from outside the systems biology field could contribute a stochastic integrator to poincaré,
which would then be available in SimBio.
This clear separation of concerns also makes the packages more comprehensible,
lowering the barrier for contributing improvements or new features.
Such an architecture ensures their maintainability and ongoing development well into the future.

# References

::: {#refs}
:::
