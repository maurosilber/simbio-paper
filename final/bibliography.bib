@article{bergmannBASICOSimplifiedPython2023b,
  title = {{{BASICO}}: {{A}} Simplified {{Python}} Interface to {{COPASI}}},
  shorttitle = {{{BASICO}}},
  author = {Bergmann, Frank T.},
  year = {2023},
  month = oct,
  journal = {Journal of Open Source Software},
  volume = {8},
  number = {90},
  pages = {5553},
  issn = {2475-9066},
  doi = {10.21105/joss.05553},
  urldate = {2024-03-20},
  abstract = {Bergmann, F. T., (2023). BASICO: A simplified Python interface to COPASI. Journal of Open Source Software, 8(90), 5553, https://doi.org/10.21105/joss.05553},
  langid = {english},
  file = {/Users/maurosilber/Zotero/storage/D79JUNS4/Bergmann_2023_BASICO.pdf}
}

@article{boeingAspectOrientedDesignModelling2018,
  title = {Towards an {{Aspect-Oriented Design}} and {{Modelling Framework}} for {{Synthetic Biology}}},
  author = {Boeing, Philipp and Leon, Miriam and Nesbeth, Darren N and Finkelstein, Anthony and Barnes, Chris P},
  year = {2018},
  month = sep,
  journal = {Processes (Basel, Switzerland)},
  volume = {6},
  number = {9},
  pages = {167},
  issn = {2227-9717},
  doi = {10.3390/pr6090167},
  urldate = {2023-09-21},
  abstract = {Work on synthetic biology has largely used a component-based metaphor for system construction. While this paradigm has been successful for the construction of numerous systems, the incorporation of contextual design issues-either compositional, host or environmental-will be key to realising more complex applications. Here, we present a design framework that radically steps away from a purely parts-based paradigm by using aspect-oriented software engineering concepts. We believe that the notion of concerns is a powerful and biologically credible way of thinking about system synthesis. By adopting this approach, we can separate core concerns, which represent modular aims of the design, from cross-cutting concerns, which represent system-wide attributes. The explicit handling of cross-cutting concerns allows for contextual information to enter the design process in a modular way. As a proof-of-principle, we implemented the aspect-oriented approach in the Python tool, SynBioWeaver, which enables the combination, or weaving, of core and cross-cutting concerns. The power and flexibility of this framework is demonstrated through a number of examples covering the inclusion of part context, combining circuit designs in a context dependent manner, and the generation of rule, logic and reaction models from synthetic circuit designs.},
  copyright = {cc by},
  langid = {english},
  pmcid = {PMC6296438},
  pmid = {30568914},
  keywords = {Aspect-oriented Software Engineering,CAD,Host Context,Mathematical Modelling,Modularity,Synbioweaver,Synthetic Biology}
}

@article{choiTelluriumExtensiblePythonbased2018,
  title = {Tellurium: {{An}} Extensible Python-Based Modeling Environment for Systems and Synthetic Biology},
  shorttitle = {Tellurium},
  author = {Choi, Kiri and Medley, J Kyle and K{\"o}nig, Matthias and Stocking, Kaylene and Smith, Lucian and Gu, Stanley and Sauro, Herbert M},
  year = {2018},
  month = sep,
  journal = {Bio Systems},
  volume = {171},
  pages = {74--79},
  issn = {1872-8324},
  doi = {10.1016/j.biosystems.2018.07.006},
  urldate = {2023-09-21},
  abstract = {Here we present Tellurium, a Python-based environment for model building, simulation, and analysis that facilitates reproducibility of models in systems and synthetic biology. Tellurium is a modular, cross-platform, and open-source simulation environment composed of multiple libraries, plugins, and specialized modules and methods. Tellurium is a self-contained modeling platform which comes with a fully configured Python distribution. Two interfaces are provided, one based on the Spyder IDE which has an accessible user interface akin to MATLAB and a second based on the Jupyter Notebook, which is a format that contains live code, equations, visualizations, and narrative text. Tellurium uses libRoadRunner as the default SBML simulation engine which supports deterministic simulations, stochastic simulations, and steady-state analyses. Tellurium also includes Antimony, a human-readable model definition language which can be converted to and from SBML. Other standard Python scientific libraries such as NumPy, SciPy, and matplotlib are included by default. Additionally, we include several user-friendly plugins and advanced modules for a wide-variety of applications, ranging from complex algorithms for bifurcation analysis to multidimensional parameter scanning. By combining multiple libraries, plugins, and modules into a single package, Tellurium provides a unified but extensible solution for biological modeling and analysis for both novices and experts.Availabilitytellurium.analogmachine.org.},
  langid = {english},
  pmcid = {PMC6108935},
  pmid = {30053414},
  keywords = {Sbml,Simulation,Software,systems biology}
}

@misc{debontePEP681Data2021,
  title = {{{PEP}} 681 -- {{Data Class Transforms}}},
  author = {De Bonte, Erik and Traut, Eric},
  year = {2021},
  month = dec,
  urldate = {2023-11-10},
  langid = {english}
}

@article{fajiculayBioSANSSoftwarePackage2022,
  title = {{{BioSANS}}: {{A}} Software Package for Symbolic and Numeric Biological Simulation},
  shorttitle = {{{BioSANS}}},
  author = {Fajiculay, Erickson and Hsu, Chao-Ping},
  year = {2022},
  month = jan,
  journal = {PloS one},
  volume = {17},
  number = {4},
  pages = {e0256409},
  issn = {1932-6203},
  doi = {10.1371/journal.pone.0256409},
  urldate = {2023-09-21},
  abstract = {Modeling biochemical systems can provide insights into behaviors that are difficult to observe or understand. It requires software, programming, and understanding of the system to build a model and study it. Softwares exist for systems biology modeling, but most support only certain types of modeling tasks. Desirable features including ease in preparing input, symbolic or analytical computation, parameter estimation, graphical user interface, and systems biology markup language (SBML) support are not seen concurrently in one software package. In this study, we developed a python-based software that supports these features, with both deterministic and stochastic propagations. The software can be used by graphical user interface, command line, or as a python import. We also developed a semi-programmable and intuitively easy topology input method for the biochemical reactions. We tested the software with semantic and stochastic SBML test cases. Tests on symbolic solution and parameter estimation were also included. The software we developed is reliable, well performing, convenient to use, and compliant with most of the SBML tests. So far it is the only systems biology software that supports symbolic, deterministic, and stochastic modeling in one package that also features parameter estimation and SBML support. This work offers a comprehensive set of tools and allows for better availability and accessibility for studying kinetics and dynamics in biochemical systems.},
  copyright = {cc by},
  langid = {english},
  pmcid = {PMC9015124},
  pmid = {35436294}
}

@article{finneySBMLL2V1,
  title = {Sbml L2v1},
  author = {Finney, Andrew and Hucka, Michael},
  langid = {english}
}

@article{finneySBMLL2V2,
  title = {Sbml L2v2},
  author = {Finney, Andrew and Hucka, Michael and Novere, Nicolas Le},
  langid = {english}
}

@article{frohlichAMICIHighperformanceSensitivity2021,
  title = {{{AMICI}}: {{High-performance}} Sensitivity Analysis for Large Ordinary Differential Equation Models},
  shorttitle = {{{AMICI}}},
  author = {Fr{\"o}hlich, Fabian and Weindl, Daniel and Sch{\"a}lte, Yannik and Pathirana, Dilan and Paszkowski, {\L}ukasz and Lines, Glenn Terje and Stapor, Paul and Hasenauer, Jan},
  year = {2021},
  month = oct,
  journal = {Bioinformatics (Oxford, England)},
  volume = {37},
  number = {20},
  pages = {3676--3677},
  issn = {1367-4811},
  doi = {10.1093/bioinformatics/btab227},
  urldate = {2023-09-21},
  abstract = {SummaryOrdinary differential equation models facilitate the understanding of cellular signal transduction and other biological processes. However, for large and comprehensive models, the computational cost of simulating or calibrating can be limiting. AMICI is a modular toolbox implemented in C++/Python/MATLAB that provides efficient simulation and sensitivity analysis routines tailored for scalable, gradient-based parameter estimation and uncertainty quantification.Availabilityand implementationAMICI is published under the permissive BSD-3-Clause license with source code publicly available on https://github.com/AMICI-dev/AMICI. Citeable releases are archived on Zenodo.Supplementary informationSupplementary data are available at Bioinformatics online.},
  copyright = {cc by},
  langid = {english},
  pmcid = {PMC8545331},
  pmid = {33821950}
}

@article{gyoriPyBioPAXBiologicalPathway2022,
  title = {{{PyBioPAX}}: {{Biological}} Pathway Exchange in {{Python}}},
  shorttitle = {{{PyBioPAX}}},
  author = {Gyori, Benjamin M and Hoyt, Charles Tapley},
  year = {2022},
  month = jan,
  journal = {Journal of open source software},
  volume = {7},
  number = {71},
  pages = {4136},
  issn = {2475-9066},
  doi = {10.21105/joss.04136},
  urldate = {2023-09-21},
  copyright = {cc by},
  langid = {english},
  pmcid = {PMC9447860},
  pmid = {36071952}
}

@article{haimanMASSpyBuildingSimulating2021,
  title = {{{MASSpy}}: {{Building}}, Simulating, and Visualizing Dynamic Biological Models in {{Python}} Using Mass Action Kinetics},
  shorttitle = {{{MASSpy}}},
  author = {Haiman, Zachary B and Zielinski, Daniel C and Koike, Yuko and Yurkovich, James T and Palsson, Bernhard O},
  year = {2021},
  month = jan,
  journal = {PLoS computational biology},
  volume = {17},
  number = {1},
  pages = {e1008208},
  issn = {1553-7358},
  doi = {10.1371/journal.pcbi.1008208},
  urldate = {2023-09-21},
  abstract = {Mathematical models of metabolic networks utilize simulation to study system-level mechanisms and functions. Various approaches have been used to model the steady state behavior of metabolic networks using genome-scale reconstructions, but formulating dynamic models from such reconstructions continues to be a key challenge. Here, we present the Mass Action Stoichiometric Simulation Python (MASSpy) package, an open-source computational framework for dynamic modeling of metabolism. MASSpy utilizes mass action kinetics and detailed chemical mechanisms to build dynamic models of complex biological processes. MASSpy adds dynamic modeling tools to the COnstraint-Based Reconstruction and Analysis Python (COBRApy) package to provide an unified framework for constraint-based and kinetic modeling of metabolic networks. MASSpy supports high-performance dynamic simulation through its implementation of libRoadRunner: the Systems Biology Markup Language (SBML) simulation engine. Three examples are provided to demonstrate how to use MASSpy: (1) a validation of the MASSpy modeling tool through dynamic simulation of detailed mechanisms of enzyme regulation; (2) a feature demonstration using a workflow for generating ensemble of kinetic models using Monte Carlo sampling to approximate missing numerical values of parameters and to quantify biological uncertainty, and (3) a case study in which MASSpy is utilized to overcome issues that arise when integrating experimental data with the computation of functional states of detailed biological mechanisms. MASSpy represents a powerful tool to address challenges that arise in dynamic modeling of metabolic networks, both at small and large scales.},
  copyright = {cc by},
  langid = {english},
  pmcid = {PMC7872247},
  pmid = {33507922}
}

@article{harrisArrayProgrammingNumPy2020,
  title = {Array Programming with {{NumPy}}},
  author = {Harris, Charles R. and Millman, K. Jarrod and {van der Walt}, St{\'e}fan J. and Gommers, Ralf and Virtanen, Pauli and Cournapeau, David and Wieser, Eric and Taylor, Julian and Berg, Sebastian and Smith, Nathaniel J. and Kern, Robert and Picus, Matti and Hoyer, Stephan and {van Kerkwijk}, Marten H. and Brett, Matthew and Haldane, Allan and {del R{\'i}o}, Jaime Fern{\'a}ndez and Wiebe, Mark and Peterson, Pearu and {G{\'e}rard-Marchant}, Pierre and Sheppard, Kevin and Reddy, Tyler and Weckesser, Warren and Abbasi, Hameer and Gohlke, Christoph and Oliphant, Travis E.},
  year = {2020},
  month = sep,
  journal = {Nature},
  volume = {585},
  number = {7825},
  pages = {357--362},
  publisher = {Nature Publishing Group},
  issn = {1476-4687},
  doi = {10.1038/s41586-020-2649-2},
  urldate = {2023-11-10},
  abstract = {Array programming provides a powerful, compact and expressive syntax for accessing, manipulating and operating on data in vectors, matrices and higher-dimensional arrays. NumPy is the primary array programming library for the Python language. It has an essential role in research analysis pipelines in fields as diverse as physics, chemistry, astronomy, geoscience, biology, psychology, materials science, engineering, finance and economics. For example, in astronomy, NumPy was an important part of the software stack used in the discovery of gravitational waves1 and in the first imaging of a black hole2. Here we review how a few fundamental array concepts lead to a simple and powerful programming paradigm for organizing, exploring and analysing scientific data. NumPy is the foundation upon which the scientific Python ecosystem is constructed. It is so pervasive that several projects, targeting audiences with specialized needs, have developed their own NumPy-like interfaces and array objects. Owing to its central position in the ecosystem, NumPy increasingly acts as an interoperability layer between such array computation libraries and, together with its application programming interface (API), provides a flexible framework to support the next decade of scientific and industrial analysis.},
  copyright = {2020 The Author(s)},
  langid = {english},
  keywords = {Computational neuroscience,Computational science,Computer science,Software,Solar physics}
}

@article{harrisArrayProgrammingNumPy2020a,
  title = {Array Programming with {{NumPy}}},
  author = {Harris, Charles R. and Millman, K. Jarrod and {van der Walt}, St{\'e}fan J. and Gommers, Ralf and Virtanen, Pauli and Cournapeau, David and Wieser, Eric and Taylor, Julian and Berg, Sebastian and Smith, Nathaniel J. and Kern, Robert and Picus, Matti and Hoyer, Stephan and {van Kerkwijk}, Marten H. and Brett, Matthew and Haldane, Allan and {del R{\'i}o}, Jaime Fern{\'a}ndez and Wiebe, Mark and Peterson, Pearu and {G{\'e}rard-Marchant}, Pierre and Sheppard, Kevin and Reddy, Tyler and Weckesser, Warren and Abbasi, Hameer and Gohlke, Christoph and Oliphant, Travis E.},
  year = {2020},
  month = sep,
  journal = {Nature},
  volume = {585},
  number = {7825},
  pages = {357--362},
  publisher = {Nature Publishing Group},
  issn = {1476-4687},
  doi = {10.1038/s41586-020-2649-2},
  urldate = {2023-12-13},
  abstract = {Array programming provides a powerful, compact and expressive syntax for accessing, manipulating and operating on data in vectors, matrices and higher-dimensional arrays. NumPy is the primary array programming library for the Python language. It has an essential role in research analysis pipelines in fields as diverse as physics, chemistry, astronomy, geoscience, biology, psychology, materials science, engineering, finance and economics. For example, in astronomy, NumPy was an important part of the software stack used in the discovery of gravitational waves1 and in the first imaging of a black hole2. Here we review how a few fundamental array concepts lead to a simple and powerful programming paradigm for organizing, exploring and analysing scientific data. NumPy is the foundation upon which the scientific Python ecosystem is constructed. It is so pervasive that several projects, targeting audiences with specialized needs, have developed their own NumPy-like interfaces and array objects. Owing to its central position in the ecosystem, NumPy increasingly acts as an interoperability layer between such array computation libraries and, together with its application programming interface (API), provides a flexible framework to support the next decade of scientific and industrial analysis.},
  copyright = {2020 The Author(s)},
  langid = {english},
  keywords = {Computational neuroscience,Computational science,Computer science,Software,Solar physics}
}

@article{harrisBioNetGenAdvancesRulebased2016,
  title = {{{BioNetGen}} 2.2: {{Advances}} in Rule-Based Modeling},
  shorttitle = {{{BioNetGen}} 2.2},
  author = {Harris, Leonard A and Hogg, Justin S and Tapia, Jos{\'e}-Juan and Sekar, John A P and Gupta, Sanjana and Korsunsky, Ilya and Arora, Arshi and Barua, Dipak and Sheehan, Robert P and Faeder, James R},
  year = {2016},
  month = nov,
  journal = {Bioinformatics (Oxford, England)},
  volume = {32},
  number = {21},
  pages = {3366--3368},
  issn = {1367-4811},
  doi = {10.1093/bioinformatics/btw469},
  urldate = {2023-09-21},
  abstract = {: BioNetGen is an open-source software package for rule-based modeling of complex biochemical systems. Version 2.2 of the software introduces numerous new features for both model specification and simulation. Here, we report on these additions, discussing how they facilitate the construction, simulation and analysis of larger and more complex models than previously possible.Availability and implementationStable BioNetGen releases (Linux, Mac OS/X and Windows), with documentation, are available at http://bionetgen.org Source code is available at http://github.com/RuleWorld/bionetgen CONTACT: bionetgen.help@gmail.comSupplementary information: Supplementary data are available at Bioinformatics online.},
  langid = {english},
  pmcid = {PMC5079481},
  pmid = {27402907}
}

@article{hoopsCOPASICOmplexPAthway2006,
  title = {{{COPASI}}---a {{COmplex PAthway SImulator}}},
  author = {Hoops, Stefan and Sahle, Sven and Gauges, Ralph and Lee, Christine and Pahle, J{\"u}rgen and Simus, Natalia and Singhal, Mudita and Xu, Liang and Mendes, Pedro and Kummer, Ursula},
  year = {2006},
  month = dec,
  journal = {Bioinformatics (Oxford, England)},
  volume = {22},
  number = {24},
  pages = {3067--3074},
  issn = {1367-4803},
  doi = {10.1093/bioinformatics/btl485},
  urldate = {2023-11-10},
  abstract = {Motivation: Simulation and modeling is becoming a standard approach to understand complex biochemical processes. Therefore, there is a big need for software tools that allow access to diverse simulation and modeling methods as well as support for the usage of these methods.Results: Here, we present COPASI, a platform-independent and user-friendly biochemical simulator that offers several unique features. We discuss numerical issues with these features; in particular, the criteria to switch between stochastic and deterministic simulation methods, hybrid deterministic--stochastic methods, and the importance of random number generator numerical resolution in stochastic simulation.Availability: The complete software is available in binary (executable) for MS Windows, OS X, Linux (Intel) and Sun Solaris (SPARC), as well as the full source code under an open source license from .Contact:  mendes@vbi.vt.edu}
}

@article{huckaSBMLL1V2,
  title = {Sbml L1v2},
  author = {Hucka, Michael and Finney, Andrew and Sauro, Herbert and Bolouri, Hamid},
  langid = {english}
}

@article{huckaSBMLL2V3,
  title = {Sbml L2v3},
  author = {Hucka, Michael and Finney, Andrew M and Hoops, Stefan and Keating, Sarah M and Nov{\`e}re, Nicolas Le},
  langid = {english}
}

@article{huckaSBMLL2V42008,
  title = {Sbml L2v4},
  shorttitle = {Systems {{Biology Markup Language}} ({{SBML}}) {{Level}} 2},
  author = {Hucka, Michael and Hoops, Stefan and Keating, Sarah and Le Nov{\`e}re, Nicolas and Sahle, Sven and Wilkinson, Darren},
  year = {2008},
  month = dec,
  journal = {Nature Precedings},
  issn = {1756-0357},
  doi = {10.1038/npre.2008.2715.1},
  urldate = {2023-10-09},
  abstract = {Abstract With the rise of Systems Biology as a new paradigm for understanding biological processes, the development of quantitative models is no longer restricted to a small circle of theoreticians. The dramatic increase in the number of these models precipitates the need to exchange and reuse both existing and newly created models. The Systems Biology Markup Language (SBML) is a free, open, XML-based format for representing quantitative models of biological interest that advocates the consistent specification of such models and thus facilitates both software development and model exchange.Principally oriented towards describing systems of biochemical reactions, such as cell signalling pathways, metabolic networks and gene regulation etc., SBML can also be used to encode any kinetic model. SBML offers mechanisms to describe biological components by means of compartments and reacting species, as well as their dynamic behaviour, using reactions, events and arbitrary mathematical rules. SBML also offers all the housekeeping structures needed to ensure an unambiguous understanding of quantitative descriptions.This is Release 1 of the specification for SBML Level 2 Version 4, describing the structures of the language and the rules used to build a valid model. SBML XML Schema and other related documents and software are also available from the SBML project web site, "http://sbml.org/":http://sbml.org/.},
  langid = {english}
}

@article{huckaSBMLL2V5,
  title = {Sbml L2v5},
  author = {Hucka, Michael and Bergmann, Frank T and Dr{\"a}ger, Andreas and Hoops, Stefan and Keating, Sarah M and Nov{\`e}re, Nicolas Le and Myers, Chris J and Olivier, Brett G and Sahle, Sven and Schaff, James C and Smith, Lucian P and Waltemath, Dagmar and Wilkinson, Darren J},
  langid = {english}
}

@article{huckaSBMLL3V1,
  title = {Sbml L3v1},
  author = {Hucka, Michael and Bergmann, Frank and Hoops, Stefan and Keating, Sarah M and Nov{\`e}re, Nicolas Le and Myers, Chris J and Olivier, Brett G and Sahle, Sven and Schaff, James C and Smith, Lucian P and Waltemath, Dagmar and Wilkinson, Darren J},
  langid = {english}
}

@article{huckaSBMLL3V2,
  title = {Sbml L3v2},
  author = {Hucka, Michael and Bergmann, Frank and Hoops, Stefan and Keating, Sarah M and Nov{\`e}re, Nicolas Le and Myers, Chris J and Olivier, Brett G and Sahle, Sven and Schaff, James C and Smith, Lucian P and Waltemath, Dagmar and Wilkinson, Darren J},
  langid = {english}
}

@misc{jax2018github,
  title = {{{JAX}}: {{Composable}} Transformations of {{Python}}+{{NumPy}} Programs},
  author = {Bradbury, James and Frostig, Roy and Hawkins, Peter and Johnson, Matthew James and Leary, Chris and Maclaurin, Dougal and Necula, George and Paszke, Adam and VanderPlas, Jake and {Wanderman-Milne}, Skye and Zhang, Qiao},
  year = {2018}
}

@inproceedings{lamNumbaLLVMbasedPython2015,
  title = {Numba: {{A LLVM-based Python JIT}} Compiler},
  shorttitle = {Numba},
  booktitle = {Proceedings of the {{Second Workshop}} on the {{LLVM Compiler Infrastructure}} in {{HPC}}},
  author = {Lam, Siu Kwan and Pitrou, Antoine and Seibert, Stanley},
  year = {2015},
  month = nov,
  series = {{{LLVM}} '15},
  pages = {1--6},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/2833157.2833162},
  urldate = {2023-11-10},
  abstract = {Dynamic, interpreted languages, like Python, are attractive for domain-experts and scientists experimenting with new ideas. However, the performance of the interpreter is often a barrier when scaling to larger data sets. This paper presents a just-in-time compiler for Python that focuses in scientific and array-oriented computing. Starting with the simple syntax of Python, Numba compiles a subset of the language into efficient machine code that is comparable in performance to a traditional compiled language. In addition, we share our experience in building a JIT compiler using LLVM[1].},
  isbn = {978-1-4503-4005-2},
  keywords = {compiler,LLVM,Python}
}

@article{landerosBioSimulatorJlStochastic2018,
  title = {{{BioSimulator}}.{{Jl}}: {{Stochastic}} Simulation in {{Julia}}},
  shorttitle = {{{BioSimulator}}.{{Jl}}},
  author = {Landeros, Alfonso and Stutz, Timothy and Keys, Kevin L and Alekseyenko, Alexander and Sinsheimer, Janet S and Lange, Kenneth and Sehl, Mary E},
  year = {2018},
  month = dec,
  journal = {Computer methods and programs in biomedicine},
  volume = {167},
  pages = {23--35},
  issn = {1872-7565},
  doi = {10.1016/j.cmpb.2018.09.009},
  urldate = {2023-09-21},
  abstract = {Background and objectivesBiological systems with intertwined feedback loops pose a challenge to mathematical modeling efforts. Moreover, rare events, such as mutation and extinction, complicate system dynamics. Stochastic simulation algorithms are useful in generating time-evolution trajectories for these systems because they can adequately capture the influence of random fluctuations and quantify rare events. We present a simple and flexible package, BioSimulator.jl, for implementing the Gillespie algorithm, {$\tau$}-leaping, and related stochastic simulation algorithms. The objective of this work is to provide scientists across domains with fast, user-friendly simulation tools.MethodsWe used the high-performance programming language Julia because of its emphasis on scientific computing. Our software package implements a suite of stochastic simulation algorithms based on Markov chain theory. We provide the ability to (a) diagram Petri Nets describing interactions, (b) plot average trajectories and attached standard deviations of each participating species over time, and (c) generate frequency distributions of each species at a specified time.ResultsBioSimulator.jl's interface allows users to build models programmatically within Julia. A model is then passed to the simulate routine to generate simulation data. The built-in tools allow one to visualize results and compute summary statistics. Our examples highlight the broad applicability of our software to systems of varying complexity from ecology, systems biology, chemistry, and genetics.ConclusionThe user-friendly nature of BioSimulator.jl encourages the use of stochastic simulation, minimizes tedious programming efforts, and reduces errors during model specification.},
  langid = {english},
  pmcid = {PMC6388686},
  pmid = {30501857},
  keywords = {$T$-leaping,Gillespie Algorithm,Julia Language,Stochastic simulation,systems biology}
}

@article{lomanCatalystFastFlexible2023,
  title = {Catalyst: {{Fast}} and Flexible Modeling of Reaction Networks},
  shorttitle = {Catalyst},
  author = {Loman, Torkel E. and Ma, Yingbo and Ilin, Vasily and Gowda, Shashi and Korsbo, Niklas and Yewale, Nikhil and Rackauckas, Chris and Isaacson, Samuel A.},
  year = {2023},
  month = oct,
  journal = {PLOS Computational Biology},
  volume = {19},
  number = {10},
  pages = {e1011530},
  publisher = {Public Library of Science},
  issn = {1553-7358},
  doi = {10.1371/journal.pcbi.1011530},
  urldate = {2023-10-19},
  abstract = {We introduce Catalyst.jl, a flexible and feature-filled Julia library for modeling and high-performance simulation of chemical reaction networks (CRNs). Catalyst supports simulating stochastic chemical kinetics (jump process), chemical Langevin equation (stochastic differential equation), and reaction rate equation (ordinary differential equation) representations for CRNs. Through comprehensive benchmarks, we demonstrate that Catalyst simulation runtimes are often one to two orders of magnitude faster than other popular tools. More broadly, Catalyst acts as both a domain-specific language and an intermediate representation for symbolically encoding CRN models as Julia-native objects. This enables a pipeline of symbolically specifying, analyzing, and modifying CRNs; converting Catalyst models to symbolic representations of concrete mathematical models; and generating compiled code for numerical solvers. Leveraging ModelingToolkit.jl and Symbolics.jl, Catalyst models can be analyzed, simplified, and compiled into optimized representations for use in numerical solvers. Finally, we demonstrate Catalyst's broad extensibility and composability by highlighting how it can compose with a variety of Julia libraries, and how existing open-source biological modeling projects have extended its intermediate representation.},
  langid = {english},
  keywords = {Biocatalysis,Biophysical simulations,Chemical reactions,Computer software,Network analysis,Polynomials,Simulation and modeling,Software tools}
}

@article{lopezProgrammingBiologicalModels2013,
  title = {Programming Biological Models in {{Python}} Using {{PySB}}},
  author = {Lopez, Carlos F and Muhlich, Jeremy L and Bachman, John A and Sorger, Peter K},
  year = {2013},
  month = jan,
  journal = {Molecular systems biology},
  volume = {9},
  pages = {646},
  issn = {1744-4292},
  doi = {10.1038/msb.2013.1},
  urldate = {2023-09-21},
  abstract = {Mathematical equations are fundamental to modeling biological networks, but as networks get large and revisions frequent, it becomes difficult to manage equations directly or to combine previously developed models. Multiple simultaneous efforts to create graphical standards, rule-based languages, and integrated software workbenches aim to simplify biological modeling but none fully meets the need for transparent, extensible, and reusable models. In this paper we describe PySB, an approach in which models are not only created using programs, they are programs. PySB draws on programmatic modeling concepts from little b and ProMot, the rule-based languages BioNetGen and Kappa and the growing library of Python numerical tools. Central to PySB is a library of macros encoding familiar biochemical actions such as binding, catalysis, and polymerization, making it possible to use a high-level, action-oriented vocabulary to construct detailed models. As Python programs, PySB models leverage tools and practices from the open-source software community, substantially advancing our ability to distribute and manage the work of testing biochemical hypotheses. We illustrate these ideas using new and previously published models of apoptosis.},
  copyright = {cc by-nc-sa},
  langid = {english},
  pmcid = {PMC3588907},
  pmid = {23423320}
}

@article{lubbockProgrammaticModelingBiological2021,
  title = {Programmatic Modeling for Biological Systems},
  author = {Lubbock, Alexander L R and Lopez, Carlos F},
  year = {2021},
  month = sep,
  journal = {Current opinion in systems biology},
  volume = {27},
  pages = {100343},
  issn = {2452-3100},
  doi = {10.1016/j.coisb.2021.05.004},
  urldate = {2023-09-21},
  abstract = {Computational modeling has become an established technique to encode mathematical representations of cellular processes and gain mechanistic insights that drive testable predictions. These models are often constructed using graphical user interfaces or domain-specific languages, with community standards used for interchange. Models undergo steady state or dynamic analysis, which can include simulation and calibration within a single application, or transfer across various tools. Here, we describe a novel programmatic modeling paradigm, whereby modeling is augmented with software engineering best practices. We focus on Python - a popular programming language with a large scientific package ecosystem. Models can be encoded as programs, adding benefits such as modularity, testing, and automated documentation generators, while still being extensible and exportable to standardized formats for use with external tools if desired. Programmatic modeling is a key technology to enable collaborative model development and enhance dissemination, transparency, and reproducibility.},
  copyright = {cc by-nc-nd},
  langid = {english},
  pmcid = {PMC8411905},
  pmid = {34485764}
}

@article{malik-sheriffBioModels15Years2020,
  title = {{{BioModels}}---15 Years of Sharing Computational Models in Life Science},
  author = {{Malik-Sheriff}, Rahuman S and Glont, Mihai and Nguyen, Tung V N and Tiwari, Krishna and Roberts, Matthew G and Xavier, Ashley and Vu, Manh T and Men, Jinghao and Maire, Matthieu and Kananathan, Sarubini and Fairbanks, Emma L and Meyer, Johannes P and Arankalle, Chinmay and Varusai, Thawfeek M and {Knight-Schrijver}, Vincent and Li, Lu and {Due{\~n}as-Roca}, Corina and Dass, Gaurhari and Keating, Sarah M and Park, Young M and Buso, Nicola and Rodriguez, Nicolas and Hucka, Michael and Hermjakob, Henning},
  year = {2020},
  month = jan,
  journal = {Nucleic Acids Research},
  volume = {48},
  number = {D1},
  pages = {D407-D415},
  issn = {0305-1048},
  doi = {10.1093/nar/gkz1055},
  urldate = {2023-12-13},
  abstract = {Computational modelling has become increasingly common in life science research. To provide a platform to support universal sharing, easy accessibility and model reproducibility, BioModels (https://www.ebi.ac.uk/biomodels/), a repository for mathematical models, was established in 2005. The current BioModels platform allows submission of models encoded in diverse modelling formats, including SBML, CellML, PharmML, COMBINE archive, MATLAB, Mathematica, R, Python or C++. The models submitted to BioModels are curated to verify the computational representation of the biological process and the reproducibility of the simulation results in the reference publication. The curation also involves encoding models in standard formats and annotation with controlled vocabularies following MIRIAM (minimal information required in the annotation of biochemical models) guidelines. BioModels now accepts large-scale submission of auto-generated computational models. With gradual growth in content over 15 years, BioModels currently hosts about 2000 models from the published literature. With about 800 curated models, BioModels has become the world's largest repository of curated models and emerged as the third most used data resource after PubMed and Google Scholar among the scientists who use modelling in their research. Thus, BioModels benefits modellers by providing access to reliable and semantically enriched curated models in standard formats that are easy to share, reproduce and reuse.}
}

@phdthesis{maTestingDynamicalSystems2021,
  title = {Testing {{Dynamical Systems}}: {{An Application}} to {{Systems Biology}}},
  author = {Ma, Steve},
  year = {2021},
  month = mar,
  school = {University of Washington}
}

@article{matthewGillesPy2BiochemicalModeling2023,
  title = {{{GillesPy2}}: {{A Biochemical Modeling Framework}} for {{Simulation Driven Biological Discovery}}},
  shorttitle = {{{GillesPy2}}},
  author = {Matthew, Sean and Carter, Fin and Cooper, Joshua and Dippel, Matthew and Green, Ethan and Hodges, Samuel and Kidwell, Mason and Nickerson, Dalton and Rumsey, Bryan and Reeve, Jesse and Petzold, Linda R and Sanft, Kevin R and Drawert, Brian},
  year = {2023},
  month = jan,
  journal = {Letters in biomathematics},
  volume = {10},
  number = {1},
  pages = {87--103},
  issn = {2373-7867},
  urldate = {2023-09-21},
  abstract = {Stochastic modeling has become an essential tool for studying biochemical reaction networks. There is a growing need for user-friendly and feature-complete software for model design and simulation. To address this need, we present GillesPy2, an open-source framework for building and simulating mathematical and biochemical models. GillesPy2, a major upgrade from the original GillesPy package, is now a stand-alone Python 3 package. GillesPy2 offers an intuitive interface for robust and reproducible model creation, facilitating rapid and iterative development. In addition to expediting the model creation process, GillesPy2 offers efficient algorithms to simulate stochastic, deterministic, and hybrid stochastic-deterministic models.},
  langid = {english},
  pmcid = {PMC10470263},
  pmid = {37655179},
  keywords = {Hybrid,Modeling,Simulation,Stochastic}
}

@inproceedings{mckinneyDataStructuresStatistical2010,
  title = {Data {{Structures}} for {{Statistical Computing}} in {{Python}}},
  booktitle = {Python in {{Science Conference}}},
  author = {McKinney, Wes},
  year = {2010},
  pages = {56--61},
  address = {Austin, Texas},
  doi = {10.25080/Majora-92bf1922-00a},
  urldate = {2023-12-13},
  abstract = {In this paper we are concerned with the practical issues of working with data sets common to finance, statistics, and other related fields. pandas is a new library which aims to facilitate working with these data sets and to provide a set of fundamental building blocks for implementing statistical models. We will discuss specific design issues encountered in the course of developing pandas with relevant examples and some comparisons with the R language. We conclude by discussing possible future directions for statistical computing and data analysis using Python.},
  langid = {english}
}

@article{meurerSymPySymbolicComputing2017,
  title = {{{SymPy}}: {{Symbolic}} Computing in {{Python}}},
  shorttitle = {{{SymPy}}},
  author = {Meurer, Aaron and Smith, Christopher P. and Paprocki, Mateusz and {\v C}ert{\'i}k, Ond{\v r}ej and Kirpichev, Sergey B. and Rocklin, Matthew and Kumar, AmiT and Ivanov, Sergiu and Moore, Jason K. and Singh, Sartaj and Rathnayake, Thilina and Vig, Sean and Granger, Brian E. and Muller, Richard P. and Bonazzi, Francesco and Gupta, Harsh and Vats, Shivam and Johansson, Fredrik and Pedregosa, Fabian and Curry, Matthew J. and Terrel, Andy R. and Rou{\v c}ka, {\v S}t{\v e}p{\'a}n and Saboo, Ashutosh and Fernando, Isuru and Kulal, Sumith and Cimrman, Robert and Scopatz, Anthony},
  year = {2017},
  month = jan,
  journal = {PeerJ Computer Science},
  volume = {3},
  pages = {e103},
  publisher = {PeerJ Inc.},
  issn = {2376-5992},
  doi = {10.7717/peerj-cs.103},
  urldate = {2023-11-10},
  abstract = {SymPy is an open source computer algebra system written in pure Python. It is built with a focus on extensibility and ease of use, through both interactive and programmatic applications. These characteristics have led SymPy to become a popular symbolic library for the scientific Python ecosystem. This paper presents the architecture of SymPy, a description of its features, and a discussion of select submodules. The supplementary material provide additional examples and further outline details of the architecture and features of SymPy.},
  langid = {english}
}

@article{pedersenHighlevelLanguageRulebased2015,
  title = {A High-Level Language for Rule-Based Modelling},
  author = {Pedersen, Michael and Phillips, Andrew and Plotkin, Gordon D},
  year = {2015},
  month = jan,
  journal = {PloS one},
  volume = {10},
  number = {6},
  pages = {e0114296},
  issn = {1932-6203},
  doi = {10.1371/journal.pone.0114296},
  urldate = {2023-09-21},
  abstract = {Rule-based languages such as Kappa excel in their support for handling the combinatorial complexities prevalent in many biological systems, including signalling pathways. But Kappa provides little structure for organising rules, and large models can therefore be hard to read and maintain. This paper introduces a high-level, modular extension of Kappa called LBS-{$\kappa$}. We demonstrate the constructs of the language through examples and three case studies: a chemotaxis switch ring, a MAPK cascade, and an insulin signalling pathway. We then provide a formal definition of LBS-{$\kappa$} through an abstract syntax and a translation to plain Kappa. The translation is implemented in a compiler tool which is available as a web application. We finally demonstrate how to increase the expressivity of LBS-{$\kappa$} through embedded scripts in a general-purpose programming language, a technique which we view as generally applicable to other domain specific languages.},
  copyright = {cc by},
  langid = {english},
  pmcid = {PMC4456403},
  pmid = {26043208}
}

@article{pooleBioCRNpylerCompilingChemical2022,
  title = {{{BioCRNpyler}}: {{Compiling}} Chemical Reaction Networks from Biomolecular Parts in Diverse Contexts},
  shorttitle = {{{BioCRNpyler}}},
  author = {Poole, William and Pandey, Ayush and Shur, Andrey and Tuza, Zoltan A and Murray, Richard M},
  year = {2022},
  month = apr,
  journal = {PLoS computational biology},
  volume = {18},
  number = {4},
  pages = {e1009987},
  issn = {1553-7358},
  doi = {10.1371/journal.pcbi.1009987},
  urldate = {2023-09-21},
  abstract = {Biochemical interactions in systems and synthetic biology are often modeled with chemical reaction networks (CRNs). CRNs provide a principled modeling environment capable of expressing a huge range of biochemical processes. In this paper, we present a software toolbox, written in Python, that compiles high-level design specifications represented using a modular library of biochemical parts, mechanisms, and contexts to CRN implementations. This compilation process offers four advantages. First, the building of the actual CRN representation is automatic and outputs Systems Biology Markup Language (SBML) models compatible with numerous simulators. Second, a library of modular biochemical components allows for different architectures and implementations of biochemical circuits to be represented succinctly with design choices propagated throughout the underlying CRN automatically. This prevents the often occurring mismatch between high-level designs and model dynamics. Third, high-level design specification can be embedded into diverse biomolecular environments, such as cell-free extracts and in vivo milieus. Finally, our software toolbox has a parameter database, which allows users to rapidly prototype large models using very few parameters which can be customized later. By using BioCRNpyler, users ranging from expert modelers to novice script-writers can easily build, manage, and explore sophisticated biochemical models using diverse biochemical implementations, environments, and modeling assumptions.},
  copyright = {cc by},
  langid = {english},
  pmcid = {PMC9060376},
  pmid = {35442944}
}

@misc{SBMLTestSuite,
  title = {{{SBML Test Suite}} Release 3.3.0},
  urldate = {2024-03-21},
  howpublished = {https://zenodo.org/records/1112521}
}

@article{scholzelCharacteristicsMathematicalModeling2021,
  title = {Characteristics of Mathematical Modeling Languages That Facilitate Model Reuse in Systems Biology: {{A}} Software Engineering Perspective},
  shorttitle = {Characteristics of Mathematical Modeling Languages That Facilitate Model Reuse in Systems Biology},
  author = {Sch{\"o}lzel, Christopher and Blesius, Valeria and Ernst, Gernot and Dominik, Andreas},
  year = {2021},
  month = jun,
  journal = {NPJ systems biology and applications},
  volume = {7},
  number = {1},
  pages = {27},
  issn = {2056-7189},
  doi = {10.1038/s41540-021-00182-w},
  urldate = {2023-09-21},
  abstract = {Reuse of mathematical models becomes increasingly important in systems biology as research moves toward large, multi-scale models composed of heterogeneous subcomponents. Currently, many models are not easily reusable due to inflexible or confusing code, inappropriate languages, or insufficient documentation. Best practice suggestions rarely cover such low-level design aspects. This gap could be filled by software engineering, which addresses those same issues for software reuse. We show that languages can facilitate reusability by being modular, human-readable, hybrid (i.e., supporting multiple formalisms), open, declarative, and by supporting the graphical representation of models. Modelers should not only use such a language, but be aware of the features that make it desirable and know how to apply them effectively. For this reason, we compare existing suitable languages in detail and demonstrate their benefits for a modular model of the human cardiac conduction system written in Modelica.},
  copyright = {cc by},
  langid = {english},
  pmcid = {PMC8175692},
  pmid = {34083542}
}

@misc{SEDMLL1V1,
  title = {Sed-Ml L1v1}
}

@misc{SEDMLL1V2,
  title = {Sed-Ml L1v2}
}

@misc{SEDMLL1V3,
  title = {Sed-Ml L1v3}
}

@misc{SEDMLL1V4,
  title = {Sed-Ml L1v4}
}

@article{shaikhBioSimulatorsCentralRegistry2022,
  title = {{{BioSimulators}}: {{A}} Central Registry of Simulation Engines and Services for Recommending Specific Tools},
  shorttitle = {{{BioSimulators}}},
  author = {Shaikh, Bilal and Smith, Lucian P and Vasilescu, Dan and Marupilla, Gnaneswara and Wilson, Michael and Agmon, Eran and Agnew, Henry and Andrews, Steven S and Anwar, Azraf and Beber, Moritz E and Bergmann, Frank T and Brooks, David and Brusch, Lutz and Calzone, Laurence and Choi, Kiri and Cooper, Joshua and Detloff, John and Drawert, Brian and Dumontier, Michel and Ermentrout, G Bard and Faeder, James R and Freiburger, Andrew P and Fr{\"o}hlich, Fabian and Funahashi, Akira and Garny, Alan and Gennari, John H and Gleeson, Padraig and Goelzer, Anne and Haiman, Zachary and Hasenauer, Jan and Hellerstein, Joseph L and Hermjakob, Henning and Hoops, Stefan and Ison, Jon C and Jahn, Diego and Jakubowski, Henry V and Jordan, Ryann and Kala{\v s}, Mat{\'u}{\v s} and K{\"o}nig, Matthias and Liebermeister, Wolfram and Sheriff, Rahuman S Malik and Mandal, Synchon and McDougal, Robert and Medley, J Kyle and Mendes, Pedro and M{\"u}ller, Robert and Myers, Chris J and Naldi, Aurelien and Nguyen, Tung V N and Nickerson, David P and Olivier, Brett G and Patoliya, Drashti and Paulev{\'e}, Lo{\"i}c and Petzold, Linda R and Priya, Ankita and Rampadarath, Anand K and Rohwer, Johann M and Saglam, Ali S and Singh, Dilawar and Sinha, Ankur and Snoep, Jacky and Sorby, Hugh and Spangler, Ryan and Starru{\ss}, J{\"o}rn and Thomas, Payton J and {van Niekerk}, David and Weindl, Daniel and Zhang, Fengkai and Zhukova, Anna and Goldberg, Arthur P and Schaff, James C and Blinov, Michael L and Sauro, Herbert M and Moraru, Ion I and Karr, Jonathan R},
  year = {2022},
  month = jul,
  journal = {Nucleic Acids Research},
  volume = {50},
  number = {W1},
  pages = {W108-W114},
  issn = {0305-1048},
  doi = {10.1093/nar/gkac331},
  urldate = {2023-11-10},
  abstract = {Computational models have great potential to accelerate bioscience, bioengineering, and medicine. However, it remains challenging to reproduce and reuse simulations, in part, because the numerous formats and methods for simulating various subsystems and scales remain siloed by different software tools. For example, each tool must be executed through a distinct interface. To help investigators find and use simulation tools, we developed BioSimulators (https://biosimulators.org), a central registry of the capabilities of simulation tools and consistent Python, command-line and containerized interfaces to each version of each tool. The foundation of BioSimulators is standards, such as CellML, SBML, SED-ML and the COMBINE archive format, and validation tools for simulation projects and simulation tools that ensure these standards are used consistently. To help modelers find tools for particular projects, we have also used the registry to develop recommendation services. We anticipate that BioSimulators will help modelers exchange, reproduce, and combine simulations.}
}

@article{shaikhRunBioSimulationsExtensibleWeb2021,
  title = {{{RunBioSimulations}}: {{An}} Extensible Web Application That Simulates a Wide Range of Computational Modeling Frameworks, Algorithms, and Formats},
  shorttitle = {{{RunBioSimulations}}},
  author = {Shaikh, Bilal and Marupilla, Gnaneswara and Wilson, Mike and Blinov, Michael L and Moraru, Ion I and Karr, Jonathan R},
  year = {2021},
  month = jul,
  journal = {Nucleic Acids Research},
  volume = {49},
  number = {W1},
  pages = {W597-W602},
  issn = {0305-1048},
  doi = {10.1093/nar/gkab411},
  urldate = {2023-11-10},
  abstract = {Comprehensive, predictive computational models have significant potential for science, bioengineering, and medicine. One promising way to achieve more predictive models is to combine submodels of multiple subsystems. To capture the multiple scales of biology, these submodels will likely require multiple modeling frameworks and simulation algorithms. Several community resources are already available for working with many of these frameworks and algorithms. However, the variety and sheer number of these resources make it challenging to find and use appropriate tools for each model, especially for novice modelers and experimentalists. To make these resources easier to use, we developed RunBioSimulations (https://run.biosimulations.org), a single web application for executing a broad range of models. RunBioSimulations leverages community resources, including BioSimulators, a new open registry of simulation tools. These resources currently enable RunBioSimulations to execute nine frameworks and 44 algorithms, and they make RunBioSimulations extensible to additional frameworks and algorithms. RunBioSimulations also provides features for sharing simulations and interactively visualizing their results. We anticipate that RunBioSimulations will foster reproducibility, stimulate collaboration, and ultimately facilitate the creation of more predictive models.}
}

@article{smithAntimonyModularModel2009,
  title = {Antimony: {{A}} Modular Model Definition Language},
  shorttitle = {Antimony},
  author = {Smith, Lucian P. and Bergmann, Frank T. and Chandran, Deepak and Sauro, Herbert M.},
  year = {2009},
  month = sep,
  journal = {Bioinformatics (Oxford, England)},
  volume = {25},
  number = {18},
  pages = {2452--2454},
  issn = {1367-4803},
  doi = {10.1093/bioinformatics/btp401},
  urldate = {2023-10-23},
  abstract = {Motivation: Model exchange in systems and synthetic biology has been standardized for computers with the Systems Biology Markup Language (SBML) and CellML, but specialized software is needed for the generation of models in these formats. Text-based model definition languages allow researchers to create models simply, and then export them to a common exchange format. Modular languages allow researchers to create and combine complex models more easily. We saw a use for a modular text-based language, together with a translation library to allow other programs to read the models as well.Summary: The Antimony language provides a way for a researcher to use simple text statements to create, import, and combine biological models, allowing complex models to be built from simpler models, and provides a special syntax for the creation of modular genetic networks. The libAntimony library allows other software packages to import these models and convert them either to SBML or their own internal format.Availability: The Antimony language specification and the libAntimony library are available under a BSD license from http://antimony.sourceforge.net/Contact:  lpsmith@u.washington.edu}
}

@article{tangherloniFiCoSFinegrainedCoarsegrained2021,
  title = {{{FiCoS}}: {{A}} Fine-Grained and Coarse-Grained {{GPU-powered}} Deterministic Simulator for Biochemical Networks},
  shorttitle = {{{FiCoS}}},
  author = {Tangherloni, Andrea and Nobile, Marco S and Cazzaniga, Paolo and Capitoli, Giulia and Spolaor, Simone and Rundo, Leonardo and Mauri, Giancarlo and Besozzi, Daniela},
  year = {2021},
  month = sep,
  journal = {PLoS computational biology},
  volume = {17},
  number = {9},
  pages = {e1009410},
  issn = {1553-7358},
  doi = {10.1371/journal.pcbi.1009410},
  urldate = {2023-09-21},
  abstract = {Mathematical models of biochemical networks can largely facilitate the comprehension of the mechanisms at the basis of cellular processes, as well as the formulation of hypotheses that can be tested by means of targeted laboratory experiments. However, two issues might hamper the achievement of fruitful outcomes. On the one hand, detailed mechanistic models can involve hundreds or thousands of molecular species and their intermediate complexes, as well as hundreds or thousands of chemical reactions, a situation generally occurring in rule-based modeling. On the other hand, the computational analysis of a model typically requires the execution of a large number of simulations for its calibration, or to test the effect of perturbations. As a consequence, the computational capabilities of modern Central Processing Units can be easily overtaken, possibly making the modeling of biochemical networks a worthless or ineffective effort. To the aim of overcoming the limitations of the current state-of-the-art simulation approaches, we present in this paper FiCoS, a novel "black-box" deterministic simulator that effectively realizes both a fine-grained and a coarse-grained parallelization on Graphics Processing Units. In particular, FiCoS exploits two different integration methods, namely, the Dormand-Prince and the Radau IIA, to efficiently solve both non-stiff and stiff systems of coupled Ordinary Differential Equations. We tested the performance of FiCoS against different deterministic simulators, by considering models of increasing size and by running analyses with increasing computational demands. FiCoS was able to dramatically speedup the computations up to 855{\texttimes}, showing to be a promising solution for the simulation and analysis of large-scale models of complex biological processes.},
  copyright = {cc by},
  langid = {english},
  pmcid = {PMC8476010},
  pmid = {34499658}
}

@article{tangherloniLASSIESimulatingLargescale2017,
  title = {{{LASSIE}}: {{Simulating}} Large-Scale Models of Biochemical Systems on {{GPUs}}},
  shorttitle = {{{LASSIE}}},
  author = {Tangherloni, Andrea and Nobile, Marco S and Besozzi, Daniela and Mauri, Giancarlo and Cazzaniga, Paolo},
  year = {2017},
  month = may,
  journal = {BMC bioinformatics},
  volume = {18},
  number = {1},
  pages = {246},
  issn = {1471-2105},
  doi = {10.1186/s12859-017-1666-0},
  urldate = {2023-09-21},
  abstract = {BackgroundMathematical modeling and in silico analysis are widely acknowledged as complementary tools to biological laboratory methods, to achieve a thorough understanding of emergent behaviors of cellular processes in both physiological and perturbed conditions. Though, the simulation of large-scale models-consisting in hundreds or thousands of reactions and molecular species-can rapidly overtake the capabilities of Central Processing Units (CPUs). The purpose of this work is to exploit alternative high-performance computing solutions, such as Graphics Processing Units (GPUs), to allow the investigation of these models at reduced computational costs.ResultsLASSIE is a "black-box" GPU-accelerated deterministic simulator, specifically designed for large-scale models and not requiring any expertise in mathematical modeling, simulation algorithms or GPU programming. Given a reaction-based model of a cellular process, LASSIE automatically generates the corresponding system of Ordinary Differential Equations (ODEs), assuming mass-action kinetics. The numerical solution of the ODEs is obtained by automatically switching between the Runge-Kutta-Fehlberg method in the absence of stiffness, and the Backward Differentiation Formulae of first order in presence of stiffness. The computational performance of LASSIE are assessed using a set of randomly generated synthetic reaction-based models of increasing size, ranging from 64 to 8192 reactions and species, and compared to a CPU-implementation of the LSODA numerical integration algorithm.ConclusionsLASSIE adopts a novel fine-grained parallelization strategy to distribute on the GPU cores all the calculations required to solve the system of ODEs. By virtue of this implementation, LASSIE achieves up to 92{\texttimes} speed-up with respect to LSODA, therefore reducing the running time from approximately 1 month down to 8 h to simulate models consisting in, for instance, four thousands of reactions and species. Notably, thanks to its smaller memory footprint, LASSIE is able to perform fast simulations of even larger models, whereby the tested CPU-implementation of LSODA failed to reach termination. LASSIE is therefore expected to make an important breakthrough in Systems Biology applications, for the execution of faster and in-depth computational analyses of large-scale models of complex biological systems.},
  copyright = {cc by},
  langid = {english},
  pmcid = {PMC5424297},
  pmid = {28486952},
  keywords = {Deterministic Simulation,Fine-grained Parallelization,Gpu Computing,Graphics Processing Unit,Lsoda,Numerical Integration Method,Nvidia Cuda,Reaction-based Model,Rule-based Model,systems biology}
}

@article{welshLibRoadRunnerHighPerformance2023,
  title = {{{libRoadRunner}} 2.0: {{A}} High Performance {{SBML}} Simulation and Analysis Library},
  shorttitle = {{{libRoadRunner}} 2.0},
  author = {Welsh, Ciaran and Xu, Jin and Smith, Lucian and K{\"o}nig, Matthias and Choi, Kiri and Sauro, Herbert M},
  year = {2023},
  month = jan,
  journal = {Bioinformatics (Oxford, England)},
  volume = {39},
  number = {1},
  pages = {btac770},
  issn = {1367-4811},
  doi = {10.1093/bioinformatics/btac770},
  urldate = {2023-09-21},
  abstract = {MotivationThis article presents libRoadRunner 2.0, an extensible, high-performance, cross-platform, open-source software library for the simulation and analysis of models expressed using the systems biology markup language (SBML).ResultslibRoadRunner is a self-contained library, able to run either as a component inside other tools via its C++, C and Python APIs, or interactively through its Python or Julia interface. libRoadRunner uses a custom just-in-time (JIT) compiler built on the widely used LLVM JIT compiler framework. It compiles SBML-specified models directly into native machine code for a large variety of processors, making it fast enough to simulate extremely large models or repeated runs in reasonable timeframes. libRoadRunner is flexible, supporting the bulk of the SBML specification (except for delay and non-linear algebraic equations) as well as several SBML extensions such as hierarchical composition and probability distributions. It offers multiple deterministic and stochastic integrators, as well as tools for steady-state, sensitivity, stability and structural analyses.Availability and implementationlibRoadRunner binary distributions for Windows, Mac OS and Linux, Julia and Python bindings, source code and documentation are all available at https://github.com/sys-bio/roadrunner, and Python bindings are also available via pip. The source code can be compiled for the supported systems as well as in principle any system supported by LLVM-13, such as ARM-based computers like the Raspberry Pi. The library is licensed under the Apache License Version 2.0.},
  copyright = {cc by},
  langid = {english},
  pmcid = {PMC9825722},
  pmid = {36478036}
}

@article{sego_simservice_2024,
	title = {{SimService}: a lightweight library for building simulation services in {Python}},
	volume = {40},
	issn = {1367-4811},
	url = {https://doi.org/10.1093/bioinformatics/btae009},
	doi = {10.1093/bioinformatics/btae009},
	abstract = {Integrative biological modeling requires software infrastructure to launch, interconnect, and execute simulation software components without loss of functionality. SimService is a software library that enables deploying simulations in integrated applications as memory-isolated services with interactive proxy objects in the Python programming language. SimService supports customizing the interface of proxies so that simulation developers and users alike can tailor generated simulation instances according to model, method, and integrated application.SimService is written in Python, is freely available on GitHub under the MIT license at https://github.com/tjsego/simservice, and is available for download via the Python Package Index (package name “simservice”) and conda (package name “simservice” on the conda-forge channel).},
	number = {1},
	journal = {Bioinformatics},
	author = {Sego, T J},
	month = jan,
	year = {2024},
	note = {\_eprint: https://academic.oup.com/bioinformatics/article-pdf/40/1/btae009/56416842/btae009.pdf},
	pages = {btae009},
}
